// CLI-specific Tasks //////////////////////////////////////////////////////////
import org.apache.tools.ant.taskdefs.condition.Os



task fakeinstall(dependsOn: ["fakeuninstall"]) << {
	description = "Must be run as root: Makes syncany/sy command available everywhere (symlink to syncany-cli/build/..)"

	// Do not depend on :syncany-cli:installApp to avoid permission issues when
	// running fakeinstall as "root"; manually calling installApp required

	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		copy {
			from "gradle/windows/syncany.bat"
			into System.getenv()["windir"]
			rename("syncany.bat", "sy.bat")
			expand(appBinary: "${buildDir}/install/${applicationName}/bin/syncany.bat")
		}
	}
	else{
    		ant.symlink(resource: "${buildDir}/install/${applicationName}/bin/${applicationName}", link: "/usr/local/bin/syncany")
    		ant.symlink(resource: "${buildDir}/install/${applicationName}/bin/${applicationName}", link: "/usr/local/bin/sy")
	}

    if(Os.isFamily(Os.FAMILY_MAC)) {
        copy {
            from "gradle/osx/org.syncany.daemon.plist"
            into "/Library/LaunchAgents"
        }
        exec {
            commandLine "/bin/launchctl", "load", "/Library/LaunchAgents/org.syncany.daemon.plist"
        }
    }
}

task fakeuninstall << {
	description = "Must be run as root: Removes symlink for syncany/sy command (complement to fakeinstall)"

	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		new File(System.getenv()["windir"] + "/syncany.bat").delete()
		new File(System.getenv()["windir"] + "/sy.bat").delete()
	}
	else {
		new File("/usr/local/bin/syncany").delete()
		new File("/usr/local/bin/sy").delete()
	}

    if(Os.isFamily(Os.FAMILY_MAC)) {
        File daemonFile = new File("/Library/LaunchAgents/org.syncany.daemon.plist")

        if (daemonFile.exists()) {
            exec {
                commandLine "/bin/launchctl", "stop", "org.syncany.daemon"
                commandLine "/bin/launchctl", "unload", "/Library/LaunchAgents/org.syncany.daemon.plist"
            }
            daemonFile.delete()
        }
    }
}
